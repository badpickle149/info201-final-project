## Using the `str_count` function, create a variable `occurrences` that stores the # of times the letter "e"
## appears in `my_intro`
occurances <- str_count(my_intro, "e")
## Write another function `double` that takes in a (numeric) variable and returns that variable times two
double <- function(x) 2 * x
## Using your `double` function, create a variable `minutes_in_two_days`, which is the number of minutes in
## two days
minutes_in_two_days <- minutes_in_day * 2
## Write another function `third_power` that takes in a value and returns that value cubed
third_power <- function(x) x^3
## Create a variable `twenty_seven`` by passing the number 3 to your `cube` function
twenty_seven <- third_power(3)
### ------------------------------ working with vectors ------------------------------
## Create a vector `movies` that contains the names of six movies you like
movies <- c("42", "Unbroken", "The Sandlot", "The Avengers", "Star Wars IV", "Captain America")
## Create a vector `top_three` that only contains the first three movies in the vector.
## Use indexing.
top_three <- movies[c(1,2,3)]
## Using your vector and the paste method, create a vector `excited` that adds the phrase -
## " is a great movie!" to the end of each element in your movies vector
excited <- paste(movies, "is a great movie!")
## Create a vector `without_four` that has your first three movies, and your 5th and 6th movies.
without_four <- movies[c(1,2,3,5,6)]
## Create a vector `numbers` that is the numbers 700 through 999
numbers <- 700:999
## Using the built in length function, create a variable `len` that is equal to the length of your vector
## `numbers`
len <- length(numbers)
## Using the `mean` function, create a variable `numbers_mean` that is the mean of your vector `numbers`
numbers_mean <- mean(numbers)
## Using the `median` function, create a variable `numbers_median` that is the median of your vector `numbers`
numbers_median <- median(numbers)
## Create a vector `lower_numbers` that is the numbers 500:699
lower_numbers <- 500:699
## Create a vector `all_numbers` that combines your `lower_numbers` and `numbers` vectors
all_numbers <- c(lower_numbers, numbers)
### -------------------- Dates --------------------
## you may also consult 'lubridate' package for additional date-time functionality
## Use the `as.Date()` function to create a variable `today` that represents today's date
## You can pass in a character string of the day you wrote this, or you can get the current date
## Hint: check documentation for 'Sys.time' and 'Sys.Date'
today <- as.Date(Sys.Date())
## Create a variable `winter_break` that represents the first day of winter break (Dec 15, 2018).
## Make sure to use the `as.Date` function again
winter_break <- as.Date("2018-12-15")
## Create a variable `days_to_break` that is how many days until break (hint: subtract the dates!)
days_to_break <- winter_break - today
## Define a function called `bday_intro` that takes in three arguments:
## a name, an age, and a character string for your next (upcoming) birthday.
## This method should return a character string of the format:
##  "Hello, my name is {name} and I'm {age} years old. In {N} days I'll be {new_age}"
## You should utilize your `make_introduction` function from Part 1, and compute {N} and {new_age} in your
## function
bday_intro <- function(name, age, birthdate)   {
N <- as.Date(birthdate) - today
new_age <- age + 1
paste(my_introduction(name, age), "In", N, "days I'll be", new_age)
}
## Create a variable `my_bday_intro` using the `bday_intro` function, passing in `my_name`, `my_age`,
## and your upcoming birthday.
my_bday_intro <- bday_intro(my_name, my_age, "2018-12-27")
## Note: you may look up 'lubridate' package by Hadley Wickham for more convenient handling of dates
### -------------------- Challenge --------------------
## Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a
## *vector of strings*.
remove_digits <- function(vector_of_strings)   {
vector_of_strings <- sub("[1:9]+", "", vector_of_strings)
}
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
remove_digits(c("CLAS 430", "MATH 307", "ENGL 297", "INFO 201"))
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
if(str_detect(c("CLAS 430", "MATH 307", "ENGL 297", "INFO 201"), "[1:9]+"))  {
print("Oh no!")
} else {
print("Yay!")
}
## a2-foundational-skills
## -------------------- Set up and Defining variables --------------------
## Install and load the the `stringr` package, which has a variety of built in functions that make working
## with string variables easier.  You may read more about stringr in Wickham & Grolemund "R for Data Science"
## http://r4ds.had.co.nz/strings.html
#install.packages("stringr")
library("stringr")
#Create a numeric variable `my_age` that is equal to your age
my_age <- 19
## Create a variable `my_name` that is equal to your first name
my_name <- "Ryan"
## Using multiplication, create a variable `minutes_in_day` that is equal to the number of minutes in a day
minutes_in_day <- 60 * 24
## Using multiplication, create a variable `hours_in_year` that is the number of hours in a year
hours_in_year <- 24 * 365
## Create a variable `minutes_rule` that is a boolean value (TRUE/FALSE) by logical operations
## It should be TRUE if there are more minutes in a day than hours in a year, otherwise FALSE
minutes_rule <- minutes_in_day > hours_in_year
## Compute and print the following a bit useful numbers.
## Assign the results to suitably named variables.
##
## How many seconds are there in year?
seconds_in_year <- 60 * 60 * 24 * 365
print(seconds_in_year)
## How many seconds is a typical human lifetime?
seconds_in_lifetime <- seconds_in_year * 79
print(seconds_in_lifetime)
## Age of the universe is 13.8 billion years.  What is it's age in seconds?
## Comment:
## If you estimate, based on timings on a small dataset, that your task on the full data
## takes more than this many seconds on a fast computers,
## we can safely say that your code fails :-)
how_many_seconds <- seconds_in_year * 13800000000
### -------------------- Working with functions --------------------
## Write a function called `make_introduction` that takes in two arguments: name, and age.
## This function should return a string value that says something like "Hello, my name is {name}, and I'm
## {age} years old".
make_introduction <- function(name, age)  paste0("Hello, my name is ", name, ", I am ", age, " years old")
## Create a variable `my_intro` by passing your variables `my_name` and `my_age` into your `make_introduction`
## function
my_intro <- make_introduction(my_name, my_age)
## Create a variable `casual_intro` by substituting "Hello, my name is ", with "Hey, I'm" in your `my_intro`
## variable
casual_intro <- str_replace(my_intro< "Hello, my name is", "Hey, I'm")
## Create a new variable `loud_intro`, which is your `my_intro` variable in all upper-case letters
loud_intro <- str_to_upper(my_intro)
## Create a new variable `quiet_intro`, which is your `my_intro` variable in all lower-case letters
quiet_intro <- str_to_lower(my_intro)
## Create a new variable capitalized, which is your `my_intro` variable with each word capitalized
## hint: consult the stringr function `str_to_title`
capitalized <- str_to_title(my_intro)
## Using the `str_count` function, create a variable `occurrences` that stores the # of times the letter "e"
## appears in `my_intro`
occurances <- str_count(my_intro, "e")
## Write another function `double` that takes in a (numeric) variable and returns that variable times two
double <- function(x) 2 * x
## Using your `double` function, create a variable `minutes_in_two_days`, which is the number of minutes in
## two days
minutes_in_two_days <- minutes_in_day * 2
## Write another function `third_power` that takes in a value and returns that value cubed
third_power <- function(x) x^3
## Create a variable `twenty_seven`` by passing the number 3 to your `cube` function
twenty_seven <- third_power(3)
### ------------------------------ working with vectors ------------------------------
## Create a vector `movies` that contains the names of six movies you like
movies <- c("42", "Unbroken", "The Sandlot", "The Avengers", "Star Wars IV", "Captain America")
## Create a vector `top_three` that only contains the first three movies in the vector.
## Use indexing.
top_three <- movies[c(1,2,3)]
## Using your vector and the paste method, create a vector `excited` that adds the phrase -
## " is a great movie!" to the end of each element in your movies vector
excited <- paste(movies, "is a great movie!")
## Create a vector `without_four` that has your first three movies, and your 5th and 6th movies.
without_four <- movies[c(1,2,3,5,6)]
## Create a vector `numbers` that is the numbers 700 through 999
numbers <- 700:999
## Using the built in length function, create a variable `len` that is equal to the length of your vector
## `numbers`
len <- length(numbers)
## Using the `mean` function, create a variable `numbers_mean` that is the mean of your vector `numbers`
numbers_mean <- mean(numbers)
## Using the `median` function, create a variable `numbers_median` that is the median of your vector `numbers`
numbers_median <- median(numbers)
## Create a vector `lower_numbers` that is the numbers 500:699
lower_numbers <- 500:699
## Create a vector `all_numbers` that combines your `lower_numbers` and `numbers` vectors
all_numbers <- c(lower_numbers, numbers)
### -------------------- Dates --------------------
## you may also consult 'lubridate' package for additional date-time functionality
## Use the `as.Date()` function to create a variable `today` that represents today's date
## You can pass in a character string of the day you wrote this, or you can get the current date
## Hint: check documentation for 'Sys.time' and 'Sys.Date'
today <- as.Date(Sys.Date())
## Create a variable `winter_break` that represents the first day of winter break (Dec 15, 2018).
## Make sure to use the `as.Date` function again
winter_break <- as.Date("2018-12-15")
## Create a variable `days_to_break` that is how many days until break (hint: subtract the dates!)
days_to_break <- winter_break - today
## Define a function called `bday_intro` that takes in three arguments:
## a name, an age, and a character string for your next (upcoming) birthday.
## This method should return a character string of the format:
##  "Hello, my name is {name} and I'm {age} years old. In {N} days I'll be {new_age}"
## You should utilize your `make_introduction` function from Part 1, and compute {N} and {new_age} in your
## function
bday_intro <- function(name, age, birthdate)   {
N <- as.Date(birthdate) - today
new_age <- age + 1
paste(my_introduction(name, age), "In", N, "days I'll be", new_age)
}
## Create a variable `my_bday_intro` using the `bday_intro` function, passing in `my_name`, `my_age`,
## and your upcoming birthday.
my_bday_intro <- bday_intro(my_name, my_age, "2018-12-27")
## Note: you may look up 'lubridate' package by Hadley Wickham for more convenient handling of dates
### -------------------- Challenge --------------------
## Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a
## *vector of strings*.
remove_digits <- function(vector_of_strings)   {
vector_of_strings <- sub("[1:9]+", "", vector_of_strings)
}
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
remove_digits(c("CLAS 430", "MATH 307", "ENGL 297", "INFO 201"))
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
if(any(str_detect(c("CLAS 430", "MATH 307", "ENGL 297", "INFO 201"), "[1:9]+")))  {
print("Oh no!")
} else {
print("Yay!")
}
source('~/info201/Assignments/a2-core-programming-ryant1998/assignment.R')
source('~/info201/Assignments/a2-core-programming-ryant1998/assignment.R')
source('~/info201/Assignments/a2-core-programming-ryant1998/assignment.R')
setwd(..)
getwd
getwd()
setwd(/info201)
setwd(info201)
install.packages("babynames")\
install.packages("babynames")
library(babynames)
head(babynames)
dim(babynames)
tail(babynames)
subset <- babynames[babynames$year == 1998 & babynames$sex == "M", subset[which.max(subset$n),]
library(babynames)
subset <- babynames[babynames$year == 1998 & babynames$sex == "M", subset[which.max(subset$n),]
.
subset <- babynames[babynames$year == 1998 & babynames$sex == "M", subset[which.max(subset$n),]]
subset <- babynames[babynames$year == 1921 & babynames$sex == "f",]
install.packages("dyplr")
githubinstall("dyplyr")
install.packages("dyplr")
install.packages("dyplr")
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
install.packages("dpylr")
install.packages("dplyr")
install.packages("dplyr")
library(dyplr)
library(dplyr)
install.packages("dplyr")
libary(babynames)
library(babynames)
library(dplyr)
select(babynames, year, sex, name, n)
filter(babynames, year == 1998 & sex == "F")
head(arrange(babynames, desc(n)))
head(arrange(babynames, sex, desc(n)))
head(filter(babynames, year == 2005, sex == "M", desc(n)))
babynames%>%select(-prop)%>%filter(year==2000&sex=="F", n < 1000)%>%arrange(desc(n))%>%head(3)
babynames %>% filter(year == 2000 $ sex == "F" & n < 1000) %>% head(1)
babynames %>% filter(year == 2000 & sex == "F" & n < 1000) %>% head(1)
view("Titanic")
View("Titanic")
install.packages("Titanic")
install.packages("Titanic")
install.packages("titanic")
library("titanic")
View(titanic)
view(Titanic)
View(Titanic)
View(Titanic)
source('~/info201/Assignments/a3-using-data-ryant1998/assignment.R')
source('~/info201/Assignments/a3-using-data-ryant1998/assignment.R')
View(students)
source('~/info201/Assignments/a3-using-data-ryant1998/assignment.R')
source('~/info201/Assignments/a3-using-data-ryant1998/assignment.R')
View(students)
install.packages("httr")
library("httr")
install.packages("jsonlite")
library("jsonlite")
base <- "https://api.github.com"
org <- "info201-au2018"
uri <-paste0(base, "/orgs/", org)
header <-add_headers(Accept = "application/vnd.github.v3+json")
res <- httr::GET(uri, header)
l <- contest(res, "text") %>% jsonlite::fromJSON()
setwd("~/Documents/info201/Lab-Excercises")
setwd("~/Documents/info201/")
with(iris, plot(jitter))
with(iris, plot(jitter(Sepal.Length, 2), jitter(Sepal.Width, 2), col = Species, pch = 19))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
install.packages("httr")
source('~/info201/Assignments/a5-api-report-ryant1998/process_data.R')
source('~/info201/Assignments/a5-api-report-ryant1998/process_data.R')
install.packages("httr")
source('~/info201/Assignments/a5-api-report-ryant1998/process_data.R')
httr::GET(" https://www.googleapis.com/civicinfo/v2/elections?key=<AIzaSyD-4xtnJrUAqjVLQIQqREN1S6cfZhEWakk>")
source('~/info201/Assignments/a5-api-report-ryant1998/process_data.R')
source('~/info201/Assignments/a5-api-report-ryant1998/process_data.R')
View(g_result)
source('~/info201/Assignments/a5-api-report-ryant1998/process_data.R')
install.packages("xm12")
source('~/info201/Assignments/a5-api-report-ryant1998/process_data.R')
installed.packages("xml2")
library("xml2")
source('~/info201/Assignments/a5-api-report-ryant1998/process_data.R')
install''
install.packages("xml2")
source('~/info201/Assignments/a5-api-report-ryant1998/process_data.R')
class(content(g_result))
dim(content(g_result))
content(g_result)
install.packages("shiny")
npm install cfb-data
GET(https://api.spotify.com/v1/recommendations)
GET("https://api.spotify.com/v1/recommendations")
library("httr")
GET("https://api.spotify.com/v1/recommendations")
GET("GET https://api.spotify.com/v1/browse/categories")
library(knitr)
shiny::runApp('info201/Assignments/a8-app-ryant1998')
runApp('info201/Assignments/a8-app-ryant1998')
runApp('info201/Assignments/a8-app-ryant1998')
runApp('info201/Assignments/a8-app-ryant1998')
runApp('info201/Assignments/a8-app-ryant1998')
runApp('info201/Assignments/a8-app-ryant1998')
runApp('info201/Assignments/a8-app-ryant1998')
runApp('info201/Assignments/a8-app-ryant1998')
runApp('info201/Assignments/a8-app-ryant1998')
runApp('info201/Assignments/a8-app-ryant1998')
runApp('info201/Assignments/a8-app-ryant1998')
runApp('info201/Assignments/a8-app-ryant1998')
runApp('info201/Assignments/a8-app-ryant1998')
runApp('info201/Assignments/a8-app-ryant1998')
getwd()
setwd("C:/Users/Ryan/Documents/info201/info201-final-project")
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
library(dplyr)
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
View(combined_min)
View(combined_min)
source('~/info201/info201-final-project/processing.R')
View(combined_min)
View(combined_min)
View(scorecard)
View(scorecard)
View(scorecard_min)
View(scorecard_min)
View(treasury_min)
View(treasury_min)
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
View(combined_min)
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
c <- list_best_schools("WA")
source('~/info201/info201-final-project/processing.R')
c <- list_best_schools("WA")
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
View(scorecard)
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
View(scorecard)
source('~/info201/info201-final-project/processing.R')
View(state.abb)
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
View(combined_min)
View(combined_min)
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
View(scorecard_min)
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
View(combined_min)
View(combined_min)
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
View(combined_min)
View(combined_min)
source('~/info201/info201-final-project/processing.R')
View(combined_min)
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
View(combined_min)
View(combined_min)
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
c <- list_best_schools("WA")
View(c)
source('~/info201/info201-final-project/processing.R')
View(combined_min)
c <- list_best_schools("WA")
source('~/info201/info201-final-project/processing.R')
c <- list_best_schools("WA")
source('~/info201/info201-final-project/processing.R')
c <- list_best_schools("WA")
source('~/info201/info201-final-project/processing.R')
c <- list_best_schools("WA")
source('~/info201/info201-final-project/processing.R')
c <- list_best_schools("WA")
source('~/info201/info201-final-project/processing.R')
c <- list_best_schools("WA")
source('~/info201/info201-final-project/processing.R')
c <- list_best_schools("WA")
source('~/info201/info201-final-project/processing.R')
c <- list_best_schools("WA")
View(c)
source('~/info201/info201-final-project/processing.R')
c <- list_best_schools("WA")
View(c)
View(c)
source('~/info201/info201-final-project/processing.R')
c <- list_best_schools("WA")
source('~/info201/info201-final-project/processing.R')
c <- list_best_schools("WA")
View(c)
source('~/info201/info201-final-project/processing.R')
c <- list_best_schools("WA")
View(c)
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
c <- list_best_schools("WA")
View(c)
source('~/info201/info201-final-project/processing.R')
c <- list_best_schools("WA")
View(c)
source('~/info201/info201-final-project/processing.R')
c <- list_best_schools("WA")
View(c)
source('~/info201/info201-final-project/processing.R')
c <- list_best_schools("WA")
View(c)
source('~/info201/info201-final-project/processing.R')
c <- list_best_schools("WA")
View(c)
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
c <- list_best_schools("WA")
View(c)
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
c <- list_best_schools("WA")
View(c)
source('~/info201/info201-final-project/processing.R')
c <- list_best_schools("WA")
View(c)
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
c <- list_best_schools("WA")
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
c <- list_best_schools("WA")
View(c)
source('~/info201/info201-final-project/processing.R')
source('~/info201/info201-final-project/processing.R')
c <- list_best_schools("WA")
View(c)
source('~/info201/info201-final-project/processing.R', echo=TRUE)
source('~/info201/info201-final-project/processing.R', echo=TRUE)
source('~/info201/info201-final-project/processing.R', echo=TRUE)
c <- list_best_schools("WA")
View(c)
source('~/info201/info201-final-project/processing.R', echo=TRUE)
source('~/info201/info201-final-project/processing.R')
c <- list_best_schools("WA")
source('~/info201/info201-final-project/processing.R')
c <- list_best_schools("WA")
source('~/info201/info201-final-project/processing.R')
c <- list_best_schools("WA")
View(c)
source('~/info201/info201-final-project/processing.R')
c <- list_best_schools("WA")
source('~/info201/info201-final-project/processing.R')
c <- list_best_schools("WA")
source('~/info201/info201-final-project/processing.R')
c <- list_best_schools("WA")
source('~/info201/info201-final-project/processing.R')
c <- list_best_schools("WA")
View(c)
source('~/info201/info201-final-project/processing.R')
